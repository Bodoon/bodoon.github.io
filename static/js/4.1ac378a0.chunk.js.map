{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.scss","shared/validation.js","containers/Checkout/ContactData/ContactData.module.scss","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_module_scss__WEBPACK_IMPORTED_MODULE_1__","_Input_module_scss__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","checkValidity","rules","isValid","required","trim","minLength","length","maxLength","isEmail","test","ContactData","state","orderForm","name","type","placeholder","validation","valid","street","zipCode","country","email","deliveryMethod","formIsValid","orderHandler","event","preventDefault","formData","formElementId","_this","order","ingredients","ings","price","toFixed","orderData","userId","onOrderBurger","token","inputChangedHandler","eventIdentifier","updatedFormElement","updateObject","target","updatedOrderForm","defineProperty","inputId","setState","_this2","this","formElementArray","id","config","form","react_default","onSubmit","formElement","Button","clicked","btnType","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actionTypes","withErrorHandler","axios","Checkout","summary","react_router","to","purchasedRedirect","purchased","Checkout_ContactData_ContactData"],"mappings":"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","file":"static/js/4.1ac378a0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport classes from './Input.module.scss';\r\n\r\nconst input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n\r\n    if(props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case ('input'):\r\n            inputElement = <input\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed}/>;\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea\r\n                className={classes.InputElement}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed}/>;\r\n            break;\r\n        case ('select'):\r\n            inputElement = (\r\n                <select\r\n                    className={classes.InputElement}\r\n                    {...props.elementConfig}\r\n                    value={props.value}\r\n                    onChange={props.changed}>\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option key={option.value} value={option.value}>\r\n                            {option.displayValue}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            );\r\n            break;\r\n        default:\r\n            inputElement = <input\r\n                className={classes.InputElement}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed}/>\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}\r\n            {inputElement}</label>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__nLEoL\",\"Label\":\"Input_Label__1v0Pd\",\"InputElement\":\"Input_InputElement__sg3Fg\",\"Invalid\":\"Input_Invalid__1TJFb\"};"," const checkValidity = (value, rules) => {\r\n         let isValid = true;\r\n         if (rules.required) {\r\n             isValid = value.trim() !== '' && isValid;\r\n         }\r\n\r\n         if (rules.minLength) {\r\n             isValid = value.length >= rules.minLength && isValid;\r\n         }\r\n\r\n         if (rules.maxLength) {\r\n             isValid = value.length <= rules.maxLength && isValid;\r\n         }\r\n\r\n         if (rules.isEmail) {\r\n             const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n             isValid = pattern.test(value) && isValid\r\n         }\r\n\r\n         return isValid;\r\n};\r\n\r\nexport default checkValidity;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__1VXvE\"};","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport classes from './ContactData.module.scss';\r\nimport axios from '../../../axios-orders';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actionTypes from '../../../store/actions/index';\r\nimport checkValidity from '../../../shared/validation';\r\nimport {updateObject} from \"../../../shared/utility\";\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Street'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            zipCode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'ZIP Code (5 characters)'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLength: 5\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Country'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Your E-Mail'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        {value: 'fastest', displayValue: 'Fastest'},\r\n                        {value: 'cheapest', displayValue: 'Cheapest'}\r\n                    ]\r\n                },\r\n                validation: {\r\n                },\r\n                value: 'fastest',\r\n                valid: true\r\n            }\r\n        },\r\n        formIsValid: false\r\n    };\r\n\r\n    orderHandler = (event) => {\r\n        event.preventDefault();\r\n        const formData = {};\r\n        for (let formElementId in this.state.orderForm) {\r\n            formData[formElementId] = this.state.orderForm[formElementId].value;\r\n        }\r\n        const order = {\r\n            ingredients: this.props.ings,\r\n            price: (+this.props.price).toFixed(2),\r\n            orderData: formData,\r\n            userId: this.props.userId\r\n        };\r\n\r\n        this.props.onOrderBurger(order, this.props.token);\r\n    };\r\n\r\n    inputChangedHandler = (event, eventIdentifier) => {\r\n        const updatedFormElement = updateObject(this.state.orderForm[eventIdentifier], {\r\n            value: event.target.value,\r\n            touched: true,\r\n            valid: checkValidity(event.target.value, this.state.orderForm[eventIdentifier].validation)\r\n        });\r\n\r\n        const updatedOrderForm = updateObject(this.state.orderForm, {\r\n            [eventIdentifier]: updatedFormElement\r\n        });\r\n\r\n        let formIsValid = true;\r\n        for(let inputId in updatedOrderForm) {\r\n            formIsValid = updatedOrderForm[inputId].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({\r\n            orderForm: updatedOrderForm,\r\n            formIsValid: formIsValid\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const formElementArray = [];\r\n        for (let key in this.state.orderForm) {\r\n            formElementArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            });\r\n        }\r\n\r\n        let form = (\r\n            <form onSubmit={this.orderHandler}>\r\n                {formElementArray.map((formElement) => (\r\n                        <Input\r\n                            key={formElement.id}\r\n                            elementType={formElement.config.elementType}\r\n                            elementConfig={formElement.config.elementConfig}\r\n                            value={formElement.config.value}\r\n                            invalid={!formElement.config.valid}\r\n                            shouldValidate={formElement.config.validation}\r\n                            touched={formElement.config.touched}\r\n                            changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n                        />\r\n                    )\r\n                )}\r\n                <Button\r\n                    clicked={this.orderHandler}\r\n                    btnType='Success'\r\n                disabled={!this.state.formIsValid}>ORDER</Button>\r\n            </form>\r\n        );\r\n        if (this.props.loading) {\r\n            form = <Spinner/>;\r\n        }\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                <h2>Enter your Contact Data</h2>\r\n                {form}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n}; \r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderBurger: (orderData, token) => dispatch(actionTypes.purchaseBurger(orderData, token))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, {Component} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\n\r\nimport ContactData from './ContactData/ContactData';\r\n\r\nclass Checkout extends Component {\r\n\r\n    render() {\r\n        let summary = <Redirect to=\"/\"/>;\r\n        if (this.props.ings) {\r\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\"/> : null;\r\n            summary = (\r\n                <div>\r\n                    {purchasedRedirect}\r\n                    <ContactData/>\r\n                </div>\r\n            );\r\n        }\r\n        return summary;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        purchased: state.order.purchased\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Checkout);"],"sourceRoot":""}