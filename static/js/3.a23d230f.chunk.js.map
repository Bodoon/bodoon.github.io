{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.scss","shared/validation.js","containers/Auth/Auth.module.scss","containers/Auth/Auth.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_module_scss__WEBPACK_IMPORTED_MODULE_1__","_Input_module_scss__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","checkValidity","rules","isValid","required","trim","minLength","length","maxLength","isEmail","test","Auth","state","controls","email","type","placeholder","validation","valid","password","isSignUp","inputChangedHandler","event","controlName","updatedControls","updateObject","_this","D_proga_study_react_burger_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","setState","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetRedirectPath","_this2","formElementArray","id","config","form","formElement","react__WEBPACK_IMPORTED_MODULE_6___default","_components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_9__","loading","_components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_13__","errorMessage","error","style","color","message","split","authRedirect","isAuth","react_router_dom__WEBPACK_IMPORTED_MODULE_8__","to","onSubmit","_components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_10__","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions"],"mappings":"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","file":"static/js/3.a23d230f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport classes from './Input.module.scss';\r\n\r\nconst input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n\r\n    if(props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case ('input'):\r\n            inputElement = <input\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed}/>;\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea\r\n                className={classes.InputElement}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed}/>;\r\n            break;\r\n        case ('select'):\r\n            inputElement = (\r\n                <select\r\n                    className={classes.InputElement}\r\n                    {...props.elementConfig}\r\n                    value={props.value}\r\n                    onChange={props.changed}>\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option key={option.value} value={option.value}>\r\n                            {option.displayValue}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            );\r\n            break;\r\n        default:\r\n            inputElement = <input\r\n                className={classes.InputElement}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed}/>\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}\r\n            {inputElement}</label>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__nLEoL\",\"Label\":\"Input_Label__1v0Pd\",\"InputElement\":\"Input_InputElement__sg3Fg\",\"Invalid\":\"Input_Invalid__1TJFb\"};"," const checkValidity = (value, rules) => {\r\n         let isValid = true;\r\n         if (rules.required) {\r\n             isValid = value.trim() !== '' && isValid;\r\n         }\r\n\r\n         if (rules.minLength) {\r\n             isValid = value.length >= rules.minLength && isValid;\r\n         }\r\n\r\n         if (rules.maxLength) {\r\n             isValid = value.length <= rules.maxLength && isValid;\r\n         }\r\n\r\n         if (rules.isEmail) {\r\n             const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n             isValid = pattern.test(value) && isValid\r\n         }\r\n\r\n         return isValid;\r\n};\r\n\r\nexport default checkValidity;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__24NZm\"};","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport classes from './Auth.module.scss';\r\nimport * as actions from '../../store/actions/index';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport checkValidity from '../../shared/validation';\r\nimport {updateObject} from \"../../shared/utility\";\r\n\r\nclass Auth extends Component {\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Mail Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password (8 characters min)'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 8\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        isSignUp: true\r\n    };\r\n\r\n    componentDidMount() {\r\n        if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\r\n            this.props.onSetRedirectPath()\r\n        }\r\n    }\r\n\r\n\r\n    inputChangedHandler = (event, controlName) => {\r\n        const updatedControls = updateObject(this.state.controls, {\r\n            [controlName]: updateObject(this.state.controls[controlName], {\r\n                value: event.target.value,\r\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n                touched: true\r\n            })\r\n        });\r\n\r\n        this.setState({\r\n            controls: updatedControls\r\n        });\r\n    };\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp);\r\n    };\r\n\r\n    switchAuthModeHandler = () => {\r\n        this.setState(prevState => {\r\n            return {\r\n                isSignUp: !prevState.isSignUp\r\n            };\r\n        })\r\n    };\r\n\r\n    render() {\r\n        const formElementArray = [];\r\n        for (let key in this.state.controls) {\r\n            formElementArray.push({\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            });\r\n        }\r\n\r\n        let form = formElementArray.map(formElement => (\r\n            <Input\r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                changed={(event) => this.inputChangedHandler(event, formElement.id)}/>\r\n        ));\r\n\r\n        if (this.props.loading) {\r\n            form = <Spinner/>;\r\n        }\r\n\r\n        let errorMessage = null;\r\n\r\n        if (this.props.error) {\r\n            errorMessage = (<p style={{color: 'red'}}>{this.props.error.message.split('_').join(' ')}</p>);\r\n        }\r\n\r\n        let authRedirect = null;\r\n        if (this.props.isAuth) {\r\n            authRedirect = <Redirect to={this.props.authRedirectPath}/>\r\n        }\r\n\r\n        return (\r\n            <div className={classes.Auth}>\r\n                {authRedirect}\r\n                {errorMessage}\r\n                <h2>{this.state.isSignUp ? 'Sign up' : 'Sign in'}</h2>\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <Button btnType={\"Success\"}>SUBMIT</Button>\r\n                </form>\r\n                <Button clicked={this.switchAuthModeHandler} btnType={\"Danger\"}>SWITCH\r\n                    TO {this.state.isSignUp ? 'SIGN IN' : 'SIGN UP'}</Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuth: state.auth.token !== null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\r\n        onSetRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"],"sourceRoot":""}